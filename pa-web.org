* PA-WEB
Gestione sito web project arrakis

Le idee di strutturazione sito vengono da 
http://exploreflask.com
e da
https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world

* TRACKING
** 2017-08-10
inserted a customized .gitignore file, it's important excluding virtual enviroment
and folder instance that will contain secret config variables.
IMPORTANT - the instance forlder and the config.py in it must be created manually

created a virtual enviroment

freezed python packages with command: pip freeze > requirements.txt

Application structure sketch

.
├── config.py
├── instance
│   └── config.py
├── pa_web
│   ├── forms.py
│   ├── __init__.py
│   ├── models.py
│   ├── static
│   ├── templates
│   └── views.py
├── requirements.txt
└── run.py



** 2017-08-11
Managing config.py, we will use 2 config.py, the first in app root directory,
the other in instance/

Add sqlalchemy t project and requirements


** 2017-08-13
Inserted a basic view , modified __init__.py, run.py and views.py.


** 2017-08-24 
Created base.html with bootstrap as a layout for the application
Start managing localisation and I18N, 
for dates and times we will use the package flask-moment, the server (my RPI) is configured in UTC


** 2017-08-25
Added a contact form
Starting with email management

The problem with email management is that they are not a backgroud task, they can be converted to a backgroud task 
but still, with a lot uf users, the program will have a lot of threads.
The solution semms to be the use of CELERY , a task queue.


** 2017-08-29
Restructuring app using blueprints
The app will have 2 areas
1) main : container of arrakis weather by now
2) auth : authentication forms
  
We start with the rearrangement of config to handle different config options


** 2017-08-30
Adding tests

Start building autenticatio package
Creating a user model and a role model
they are basic tables with only 2 fields, an id and a code.
A relation is created between User and Role


** 2017-08-31
Hasking of password in user model


** 2017-09-09
User registration

** 2017-09-14
Roles definiton

** 2017-09-18
User profile management
** <2017-09-22 Fri> 
Post 

** 2017-09-26
Inserted in user form a real location calculated via geopy
it does not work

** 2017-10-04
Insert plant basic
** 2017-10-05
Managing garden type and plant garden
** 2017-10-09
Relations user <--> garden <--> plants
Posts: We will put the posts in a blog blueprint
First steps in API


* Tables
** Role
| Field       | Type       | Notes          |
|-------------+------------+----------------|
| id          | Integer    | the id         |
| name        | String(64) | role name      |
| default     | Boolean    |                |
| permissions | Integer    |                |
|             |            |                |
| users       | User       | List of users  |
|             |            | with this role |
|             |            |                |

Relation 1 to many with User

the permission filed is an integer used as bit flags
Each permision is represented like this
| Task                      | Bit value  | Description            |
|---------------------------+------------+------------------------|
| Administrator             | 0b10000000 | Administrative access  |
| Super user                | 0b00001000 | Can modify users posts |
| Follow other users posts  | 0b00000001 |                        |
| Comment other users posts | 0b00000010 |                        |
| Write posts               | 0b00000100 |                        |
|                           |            |                        |


** User
| Field         | Type        | Notes           |
|---------------+-------------+-----------------|
| id            | Integer     | user id         |
| email         | Strin(128)  |                 |
| username      | String(64)  | user name       |
| password_hash | String(128) | Hashed password |
| confirmed     | Boolean     |                 |
| name          | String(128) | user real name  |
| location      | String(128) |                 |
| about_me      | Text        |                 |
| member_since  | DateTime    |                 |
| last_seen     | DateTime    |                 |
| role          | Role        | User role       |
| posts         | Post        |                 |
| gardens       | Garden      | User gardens    |
| plants        | Plant       | User plants     |
|               |             |                 |

relation many to 1 with Role

** TODO Post
| Field     | Type     | Notes |
|-----------+----------+-------|
| id        | Integer  |       |
| body      | Text()   |       |
| timestamp | DateTime |       |
| author_id | User     |       |
|           |          |       |

** DONE Garden
Garden
| Field    | Type        | Notes                  |
|----------+-------------+------------------------|
| id       | Integer     |                        |
| name     | String(128) | Garden description     |
| type     | GardenType  |                        |
| location | String(128) | Location of the garden |
| owner    | id          | Owner of the garden    |
| plants   | Plant       | Plants of the garden   |
|          |             |                        |

GardenType (Enum)
  GARDEN=1
  VEGETABLE_GARDEN=2
  TERRACE=3
  FIELD=4

** DONE Plant
| Field       | Type         | Notes                       |
|-------------+--------------+-----------------------------|
| id          | Integer      |                             |
| name        | String(128)  |                             |
| description | String(1024) |                             |
| owner       | id           | Owner of the Plant          |
| garden      | id           | Garden the Plant belongs to |
|             |              |                             |


* API
Api are defined as a blueprint

** TODO List of posts

* NOTES
** General
To list a tree directory structure use
tree -I 'venv|*~|*#|*.pyc'

** Database
Various notes on initialization and migration of db
*** Creation of migration directory and scripts
python manage.py db init
this command create a irectory migrations with all the necessary scripts to manage 
the db

*** Initial migration 
python manage.py db migrate -m "Initial migration"

*** Other migration
python manage.py db migrate -m "New mmigration reason"

*** Updating a db
python manage.py db upgrade

** Geolocalisation
We will geopy package that is a client for variuos geocoding web services
*** Examples
**** Getting my home location via Nominatim (from openstreetmap)
>>> from geopy.geocoders import Nominatim
>>> geolocator = Nominatim()
>>> location = geolocator.geocode("Via Palestro 37, Padova")
>>> print(location.address)
37, Via Palestro, San Giuseppe, Padova, PD, VEN, 35138, Italia
**** Getting the distance from Arrakeen

* TASKS
** DONE - Remove file .#pa-web.org@ from git

** TODO - Check in detail what this code in tests do
def test_no_password_getter(self):
    user = User( username = 'test', password='test1')
    with self.assertRaises(AttributeError):
        user.password
** DONE - Check in detail what it means
return redirect(request.args.get('next') or url_for('main.index'))
## It manage a request with next as a parameter

** DONE - Geolocalisation utils
Started with a pa_gis module, try to use it in user edit form without success
Correctly manage the distance from arrakeen in user form
** TODO - Managenet of plants without gardens.
MAnage the possibility of not associating a plant to any garden in the drop down list. 
Test what will happen if no gardenare associated to a user
* PACKAGES REQUIRED
flask
sqlalchemy
