* PA-WEB
Gestione sito web project arrakis

Le idee di strutturazione sito vengono da 
http://exploreflask.com
e da
https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world

* TRACKING
** 2017-08-10
inserted a customized .gitignore file, it's important excluding virtual enviroment
and folder instance that will contain secret config variables.
IMPORTANT - the instance forlder and the config.py in it must be created manually

created a virtual enviroment

freezed python packages with command: pip freeze > requirements.txt

Application structure sketch

.
├── config.py
├── instance
│   └── config.py
├── pa_web
│   ├── forms.py
│   ├── __init__.py
│   ├── models.py
│   ├── static
│   ├── templates
│   └── views.py
├── requirements.txt
└── run.py



** 2017-08-11
Managing config.py, we will use 2 config.py, the first in app root directory,
the other in instance/

Add sqlalchemy t project and requirements


** 2017-08-13
Inserted a basic view , modified __init__.py, run.py and views.py.


** 2017-08-24 
Created base.html with bootstrap as a layout for the application
Start managing localisation and I18N, 
for dates and times we will use the package flask-moment, the server (my RPI) is configured in UTC


** 2017-08-25
Added a contact form
Starting with email management

The problem with email management is that they are not a backgroud task, they can be converted to a backgroud task 
but still, with a lot uf users, the program will have a lot of threads.
The solution semms to be the use of CELERY , a task queue.


** 2017-08-29
Restructuring app using blueprints
The app will have 2 areas
1) main : container of arrakis weather by now
2) auth : authentication forms
  
We start with the rearrangement of config to handle different config options


** 2017-08-30
Adding tests

Start building autenticatio package
Creating a user model and a role model
they are basic tables with only 2 fields, an id and a code.
A relation is created between User and Role


** 2017-08-31
Hasking of password in user model


* Tables
** Role
| Field | Type       | Notes     |
|-------+------------+-----------|
| id    | Integer    | the id    |
| name  | String(64) | role name |
|       |            |           |

Relation 1 to many with User

** User
| Field    | Type      | Notes   |
|----------+-----------+---------|
| id       | Integer   | user id |
| username | Strin(64) | user name |
relation many to 1 with Role

* NOTES
** General
To list a tree directory structure use
tree -I 'venv|*~|*#|*.pyc'

** Database
Various notes on initialization and migration of db
*** Creation of migration directory and scripts
python manage.py db init
this command create a irectory migrations with all the necessary scripts to manage 
the db

*** Initial migration 
python manage.py db migrate -m "Initial migration"

*** Updating a db
python manage.py db upgrade

* TASKS
** DONE - Remove file .#pa-web.org@ from git

** TODO - Check in detail what this code in tests do
def test_no_password_getter(self):
    user = User( username = 'test', password='test1')
    with self.assertRaises(AttributeError):
        user.password
** TODO : Check in detail what it means
return redirect(request.args.get('next') or url_for('main.index'))


* PACKAGES REQUIRED
flask
sqlalchemy
